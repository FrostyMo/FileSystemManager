@{
    ViewData["Title"] = "File System";
    var currentPath = ViewBag.CurrentPath?.ToString() ?? "";
    var breadcrumbs = ViewBag.Breadcrumbs as List<FileSystemManager.Controllers.FileSystemController.Breadcrumb>;
    var parentPath = ViewBag.ParentPath?.ToString() ?? "";
    var currentPage = ViewBag.CurrentPage;
    var totalPages = ViewBag.TotalPages;
    var items = ViewBag.Items as List<System.IO.FileSystemInfo>;
}

<h1>File System</h1>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", new { path = "" })">Home</a></li>
        @if (breadcrumbs != null)
        {
            foreach (var breadcrumb in breadcrumbs)
            {
                var isActive = breadcrumb.Path == currentPath;
                <li class="breadcrumb-item @(isActive ? "active" : "")" @(isActive ? "aria-current=\"page\"" : "")>
                    @if (!isActive)
                    {
                        <a href="@Url.Action("Index", new { path = breadcrumb.Path })">@breadcrumb.Name</a>
                    }
                    else
                    {
                        @breadcrumb.Name
                    }
                </li>
            }
        }
    </ol>
</nav>

@if (!string.IsNullOrEmpty(currentPath))
{
    <p>
        <a href="@Url.Action("Index", new { path = parentPath })">Back</a>
    </p>
}

<form method="get" asp-action="Index">
    <input type="hidden" name="path" value="@currentPath" />
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Search..." name="searchQuery" value="@ViewBag.SearchQuery" />
        <button class="btn btn-outline-secondary" type="submit">Search</button>
    </div>
</form>

<div class="card mt-4">
    <div class="card-header">
        <h2>Items</h2>
    </div>
    <div class="card-body">
        <!-- Add Headers -->
        <div class="row font-weight-bold border-bottom pb-2">
            <div class="col-md-5">Name</div>
            <div class="col-md-4">Date Modified</div>
            <div class="col-md-2">Size</div>
            <div class="col-md-1">Owner</div>
        </div>
        <ul class="list-group mt-2">
            @foreach (var item in items)
            {
                var itemPath = $"{currentPath}/{item.Name}".Replace("\\", "/");
                <li class="list-group-item d-flex justify-content-left align-items-center" data-path="@itemPath" data-type="@(item is DirectoryInfo ? "directory" : "file")">
                    <div class="name-column text-truncate">
                        @if (item is DirectoryInfo)
                        {
                            <i class="fas fa-folder"></i> <!-- Font Awesome icon for folders -->
                        }
                        else
                        {
                            <i class="fas fa-file"></i> <!-- Font Awesome icon for files -->
                        }
                        @item.Name
                    </div>
                    <div class="date-modified-column">
                        @if (item is FileSystemInfo fileSystemInfo)
                        {
                            <span>@fileSystemInfo.LastWriteTime.ToString("dd MMM yyyy") by Momin</span> <!-- Replace "Momin" with actual modifier name if available -->
                        }
                    </div>
                    <div class="size-column">
                        @if (item is FileInfo file)
                        {
                            <span>@FormatSize(file.Length)</span>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </div>
                    <div class="owner-column">
                        <span>Unknown</span> <!-- Placeholder for owner; replace with actual info if available -->
                    </div>
                </li>
            }
        </ul>
        <a class="btn btn-primary mt-3" href="@Url.Action("CreateDirectory", new { path = currentPath })">Create New Directory</a>
        <a class="btn btn-primary mt-3" href="@Url.Action("UploadFile", new { path = currentPath })">Upload New File</a>
    </div>

    @functions {
        public string FormatSize(long bytes)
        {
            if (bytes < 1024)
            {
                return $"{bytes} B";
            }
            else if (bytes < 1048576)
            {
                return $"{bytes / 1024.0:F2} KB";
            }
            else if (bytes < 1073741824)
            {
                return $"{bytes / 1048576.0:F2} MB";
            }
            else
            {
                return $"{bytes / 1073741824.0:F2} GB";
            }
        }
    }
</div>

<!-- Pagination Controls -->
@if (totalPages > 1)
{
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center mt-3">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { path = currentPath, page = currentPage - 1, searchQuery = ViewBag.SearchQuery })" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @for (var i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { path = currentPath, page = i, searchQuery = ViewBag.SearchQuery })">@i</a>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { path = currentPath, page = currentPage + 1, searchQuery = ViewBag.SearchQuery })" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}

<!-- Context Menu -->
<div id="context-menu" class="context-menu">
    <ul>
        <li id="open">Open</li>
        <li id="rename">Rename</li>
        <li id="delete">Delete</li>
        <li id="info">Info</li>
    </ul>
</div>

<!-- Info Modal -->
<div class="modal fade" id="info-modal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="infoModalLabel">File Info</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="item-info">
                    <p><strong>Created Date:</strong> <span id="create-date"></span></p>
                    <p><strong>Created By:</strong> <span id="created-by"></span></p>
                    <p><strong>Modified Date:</strong> <span id="modified-date"></span></p>
                    <p><strong>Modified By:</strong> <span id="modified-by"></span></p>
                    <p><strong>Size:</strong> <span id="size"></span></p>
                    <p><strong>Location:</strong> <span id="location"></span></p>
                    <p><strong>Expiry Date:</strong> <span id="expiry-date"></span></p>
                    <p><strong>Issued By:</strong> <span id="issued-by"></span></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
   </div>

    <!-- File Preview Modal -->
    <div class="modal fade" id="previewModal" tabindex="-1" role="dialog" aria-labelledby="previewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="previewModalLabel">File Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="filePreview"></div>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            const contextMenu = document.getElementById('context-menu');
            let selectedElement = null;

            document.addEventListener('click', function(event) {
                if (!event.target.closest('.list-group-item') && !event.target.closest('#context-menu')) {
                    contextMenu.style.display = 'none';
                    if (selectedElement) {
                        selectedElement.classList.remove('highlight-clicked');
                        selectedElement = null;
                    }
                }
            });

            document.addEventListener('contextmenu', function(event) {
                if (event.target.closest('.list-group-item')) {
                    event.preventDefault();
                    if (selectedElement) {
                        selectedElement.classList.remove('highlight-clicked');
                    }
                    selectedElement = event.target.closest('.list-group-item');
                    selectedElement.classList.add('highlight-clicked');
                    const { clientX: mouseX, clientY: mouseY } = event;

                    contextMenu.style.top = `${mouseY}px`;
                    contextMenu.style.left = `${mouseX}px`;
                    contextMenu.style.display = 'block';
                } else {
                    contextMenu.style.display = 'none';
                }
            });

            document.querySelectorAll('.list-group-item').forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.classList.add('highlight');
                });
                item.addEventListener('mouseleave', function() {
                    this.classList.remove('highlight');
                });
                item.addEventListener('dblclick', function() {
                    const path = this.getAttribute('data-path');
                    const type = this.getAttribute('data-type');
                    if (type === 'directory') {
                        window.location.href = `@Url.Action("Index", "FileSystem")?path=${path}`;
                    } else if (type === 'file') {
                        fetch(`@Url.Action("OpenFile", "FileSystem")?path=${path}`)
                            .then(response => response.blob())
                            .then(blob => {
                                const url = URL.createObjectURL(blob);
                                let previewElement;
                                const extension = path.split('.').pop().toLowerCase();
                                if (['jpg', 'jpeg', 'png', 'gif'].includes(extension)) {
                                    previewElement = `<img src="${url}" class="img-fluid">`;
                                } else if (extension === 'pdf') {
                                    previewElement = `<embed src="${url}" width="100%" height="600px">`;
                                } else if (['txt', 'html'].includes(extension)) {
                                    return response.text().then(text => {
                                        previewElement = `<pre>${text}</pre>`;
                                        document.getElementById('filePreview').innerHTML = previewElement;
                                        $('#previewModal').modal('show');
                                    });
                                } else {
                                    previewElement = `<p>Preview not available for this file type.</p>`;
                                }
                                document.getElementById('filePreview').innerHTML = previewElement;
                                $('#previewModal').modal('show');
                            });
                    }
                });
            });

            document.getElementById('open').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                if (type === 'directory') {
                    window.location.href = `@Url.Action("Index", "FileSystem")?path=${path}`;
                } else if (type === 'file') {
                    window.location.href = `@Url.Action("OpenFile", "FileSystem")?path=${path}`;
                }
            });

            document.getElementById('delete').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                if (confirm(`Are you sure you want to delete this ${type}?`)) {
                    fetch(`@Url.Action("DeleteItem", "FileSystem")?path=${path}`, {
                        method: 'DELETE'
                    }).then(response => {
                        if (response.ok) {
                            selectedElement.remove();
                            contextMenu.style.display = 'none';
                        } else {
                            alert('Error deleting item');
                        }
                    });
                }
            });

            document.getElementById('rename').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                const newName = prompt(`Enter new name for this ${type}:`);
                if (newName) {
                    fetch(`@Url.Action("RenameItem", "FileSystem")?path=${path}&newName=${newName}`, {
                        method: 'POST'
                    }).then(response => {
                        if (response.ok) {
                            const newPath = path.substring(0, path.lastIndexOf('/')) + '/' + newName;
                            selectedElement.setAttribute('data-path', newPath);
                            selectedElement.querySelector(type === 'directory' ? '.directory-name' : '.file-name').textContent = newName;
                            contextMenu.style.display = 'none';  // Close the context menu
                        } else {
                            alert('Error renaming item');
                        }
                    });
                }
            });

            document.getElementById('info').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                fetch(`@Url.Action("GetItemInfo", "FileSystem")?path=${encodeURIComponent(path)}&type=${type}`)
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('create-date').textContent = data.createDate;
                        document.getElementById('created-by').textContent = data.createdBy;
                        document.getElementById('modified-date').textContent = data.modifiedDate;
                        document.getElementById('modified-by').textContent = data.modifiedBy;
                        document.getElementById('size').textContent = data.size;
                        document.getElementById('location').textContent = data.location;
                        document.getElementById('expiry-date').textContent = data.expiryDate || 'N/A';
                        document.getElementById('issued-by').textContent = data.issuedBy || 'N/A';
                        $('#info-modal').modal('show');
                        contextMenu.style.display = 'none';  // Close the context menu
                    });
            });
        });
        </script>
        <style>
            .context-menu {
                display: none;
                position: absolute;
                background-color: white;
                border: 1px solid #ccc;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
                z-index: 1000;
                width: 150px; /* Increase the width */
            }

                .context-menu ul {
                    list-style: none;
                    margin: 0;
                    padding: 0;
                }

                    .context-menu ul li {
                        padding: 8px 12px;
                        cursor: pointer;
                        background-color: white; /* Ensure a single color */
                    }

                        .context-menu ul li:hover {
                            background-color: #eee; /* Light grey for hover effect */
                        }

            .list-group-item.highlight {
                background-color: #f0f0f0;
            }

            .list-group-item.highlight-clicked {
                background-color: #d4edda;
            }

            .modal-body p {
                word-wrap: break-word;
            }

            .modal-body .item-info {
                font-size: 1rem;
            }

                .modal-body .item-info span {
                    display: block;
                    margin-bottom: 0.5rem;
                }

            .pagination {
                justify-content: center;
                margin-top: 20px;
            }

            .page-item.active .page-link {
                background-color: #28a745;
                border-color: #28a745;
            }

            .page-link {
                color: #28a745;
            }

                .page-link:hover {
                    color: #218838;
                }
        </style>
    }
