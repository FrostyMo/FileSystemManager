@{
    ViewData["Title"] = "File System";
    var currentPath = ViewBag.CurrentPath?.ToString() ?? "";
    var parentPath = ViewBag.ParentPath?.ToString() ?? "";
}

<h1>File System</h1>

@if (!string.IsNullOrEmpty(currentPath))
{
    <p>
        <a href="@Url.Action("Index", new { path = parentPath })">Back</a>
    </p>
}

<div class="card mt-4">
    <div class="card-header">
        <h2>Directories</h2>
    </div>
    <div class="card-body">
        <ul class="list-group">
            @foreach (var directory in ViewBag.Directories)
            {
                var directoryPath = $"{currentPath}/{directory.Name}".Replace("\\", "/");
                <li class="list-group-item" data-path="@directoryPath" data-type="directory">
                    <span class="directory-name">@directory.Name</span>
                </li>
            }
        </ul>
        <a class="btn btn-primary mt-3" href="@Url.Action("CreateDirectory", new { path = currentPath })">Create New Directory</a>
    </div>
</div>

<div class="card mt-4">
    <div class="card-header">
        <h2>Files</h2>
    </div>
    <div class="card-body">
        <ul class="list-group">
            @foreach (var file in ViewBag.Files)
            {
                var filePath = $"{currentPath}/{file.Name}".Replace("\\", "/");
                <li class="list-group-item" data-path="@filePath" data-type="file">
                    <span class="file-name">@file.Name</span>
                    <span class="text-muted float-right">@file.CreationTime</span>
                </li>
            }
        </ul>
        <a class="btn btn-primary mt-3" href="@Url.Action("UploadFile", new { path = currentPath })">Upload New File</a>
    </div>
</div>

<!-- Context Menu -->
<div id="context-menu" class="context-menu">
    <ul>
        <li id="open">Open</li>
        <li id="rename">Rename</li>
        <li id="delete">Delete</li>
    </ul>
</div>

@section Scripts {
    <script>
        
        document.addEventListener('DOMContentLoaded', function() {
            const contextMenu = document.getElementById('context-menu');
            let selectedElement = null;

            document.addEventListener('click', function(event) {
                if (!event.target.closest('.list-group-item') && !event.target.closest('#context-menu')) {
                    contextMenu.style.display = 'none';
                }
            });

            document.addEventListener('contextmenu', function(event) {
                if (event.target.closest('.list-group-item')) {
                    event.preventDefault();
                    selectedElement = event.target.closest('.list-group-item');
                    const { clientX: mouseX, clientY: mouseY } = event;

                    contextMenu.style.top = `${mouseY}px`;
                    contextMenu.style.left = `${mouseX}px`;
                    contextMenu.style.display = 'block';
                } else {
                    contextMenu.style.display = 'none';
                }
            });

            document.querySelectorAll('.list-group-item').forEach(item => {
                item.addEventListener('click', function() {
                    const path = this.getAttribute('data-path');
                    const type = this.getAttribute('data-type');
                    if (type === 'directory') {
                        window.location.href = `@Url.Action("Index", "FileSystem")?path=${path}`;
                    } else if (type === 'file') {
                        window.location.href = `@Url.Action("OpenFile", "FileSystem")?path=${path}`;
                    }
                });
            });

            document.getElementById('open').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                if (type === 'directory') {
                    window.location.href = `@Url.Action("Index", "FileSystem")?path=${path}`;
                } else if (type === 'file') {
                    window.location.href = `@Url.Action("OpenFile", "FileSystem")?path=${path}`;
                }
            });

            document.getElementById('delete').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                if (confirm(`Are you sure you want to delete this ${type}?`)) {
                    fetch(`@Url.Action("DeleteItem", "FileSystem")?path=${path}`, {
                        method: 'DELETE'
                    }).then(response => {
                        if (response.ok) {
                            selectedElement.remove();
                        } else {
                            alert('Error deleting item');
                        }
                    });
                }
            });

            document.getElementById('rename').addEventListener('click', function() {
                const path = selectedElement.getAttribute('data-path');
                const type = selectedElement.getAttribute('data-type');
                const newName = prompt(`Enter new name for this ${type}:`);
                if (newName) {
                    fetch(`@Url.Action("RenameItem", "FileSystem")?path=${path}&newName=${newName}`, {
                        method: 'POST'
                    }).then(response => {
                        if (response.ok) {
                            const newPath = path.substring(0, path.lastIndexOf('/')) + '/' + newName;
                            selectedElement.setAttribute('data-path', newPath);
                            selectedElement.querySelector(type === 'directory' ? '.directory-name' : '.file-name').textContent = newName;
                            contextMenu.style.display = 'none';
                        } else {
                            alert('Error renaming item');
                        }
                    });
                }
            });
        });
    </script>
    <style>
    .context-menu {
        display: none;
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        width: 150px; /* Increase the width */
    }

    .context-menu ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .context-menu ul li {
        padding: 8px 12px;
        cursor: pointer;
        background-color: white; /* Ensure a single color */
    }

    .context-menu ul li:hover {
        background-color: #eee; /* Light grey for hover effect */
    }
    </style>
}
