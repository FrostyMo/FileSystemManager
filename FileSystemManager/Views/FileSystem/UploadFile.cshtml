@{
    ViewData["Title"] = "Upload Files";
    var currentPath = ViewBag.CurrentPath?.ToString() ?? "";
}

<h1>Upload Files</h1>

<form id="uploadForm" asp-action="UploadFiles" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label for="files">Files</label>
        <input type="file" class="form-control" name="files" multiple required>
    </div>
    <div id="fileDetailsContainer"></div>
    <button type="submit" class="btn btn-primary mt-2">Upload</button>
</form>

<!-- Conflict Modal -->
<div class="modal fade" id="conflictModal" tabindex="-1" role="dialog" aria-labelledby="conflictModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="conflictModalLabel">Conflict</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="conflictMessage"></p>
                <div class="form-group">
                    <label for="suggestedName">Suggested Name</label>
                    <input type="text" class="form-control" id="suggestedName" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="replaceButton">Replace</button>
                <button type="button" class="btn btn-primary" id="renameButton">Rename</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const fileInput = document.querySelector('input[name="files"]');
            const fileDetailsContainer = document.getElementById('fileDetailsContainer');
            const conflictModal = new bootstrap.Modal(document.getElementById('conflictModal'));
            let currentConflictIndex = 0;
            let formData;
            let filesList = [];
            let issuedByList = [];
            let expiryDateList = [];

            fileInput.addEventListener('change', function () {
                fileDetailsContainer.innerHTML = '';
                filesList = Array.from(fileInput.files);
                filesList.forEach((file, index) => {
                    const fileDetailsGroup = document.createElement('div');
                    fileDetailsGroup.classList.add('file-details-group');
                    fileDetailsGroup.innerHTML = `
                        <h5>${file.name}</h5>
                        <div class="form-group">
                            <label for="issuedBy-${index}">Issued By</label>
                            <input type="text" class="form-control" name="issuedBy" data-file-index="${index}" required>
                        </div>
                        <div class="form-group">
                            <label for="expiryDate-${index}">Expiry Date</label>
                            <input type="date" class="form-control" name="expiryDate" data-file-index="${index}" required>
                        </div>
                    `;
                    fileDetailsContainer.appendChild(fileDetailsGroup);
                });
            });

            document.getElementById('uploadForm').addEventListener('submit', function (event) {
                event.preventDefault();
                prepareFormData();

                uploadFiles(formData);
            });

            function prepareFormData() {
                formData = new FormData();
                filesList.forEach((file, index) => {
                    formData.append('files', file);

                    const issuedByInput = document.querySelector(`input[name="issuedBy"][data-file-index="${index}"]`);
                    const expiryDateInput = document.querySelector(`input[name="expiryDate"][data-file-index="${index}"]`);

                    issuedByList[index] = issuedByInput.value;
                    expiryDateList[index] = expiryDateInput.value;

                    formData.append(`issuedBy_${index}`, issuedByInput.value);
                    formData.append(`expiryDate_${index}`, expiryDateInput.value);
                });
            }

            function uploadFiles(formData) {
                fetch('@Url.Action("UploadFiles", "FileSystem")', {
                    method: 'POST',
                    body: formData
                }).then(response => {
                    if (response.status === 409) {
                        return response.json().then(data => {
                            currentConflictIndex = data.index;
                            showConflictModal(data);
                        });
                    } else if (response.ok) {
                        window.location.href = '@Url.Action("Index", "FileSystem")?path=@currentPath';
                    } else {
                        alert('Error uploading files');
                    }
                });
            }

            function showConflictModal(data) {
                document.getElementById('conflictMessage').textContent = `A file with the name ${data.fileName} already exists. Do you want to replace it or rename the new file?`;
                document.getElementById('suggestedName').value = data.suggestedName;
                conflictModal.show();
            }

            function handleFileConflict(action) {
                let fileToResolve = filesList[currentConflictIndex];
                if (action === 'rename') {
                    const newName = document.getElementById('suggestedName').value;
                    fileToResolve = new File([fileToResolve], newName, { type: fileToResolve.type });
                }

                const formDataForConflict = new FormData();
                formDataForConflict.append('files', fileToResolve);
                formDataForConflict.append('action', action);

                formDataForConflict.append(`issuedBy_${currentConflictIndex}`, issuedByList[currentConflictIndex]);
                formDataForConflict.append(`expiryDate_${currentConflictIndex}`, expiryDateList[currentConflictIndex]);

                fetch('@Url.Action("ResolveConflict", "FileSystem")', {
                    method: 'POST',
                    body: formDataForConflict
                }).then(response => {
                    if (response.status === 409) {
                        return response.json().then(data => {
                            currentConflictIndex = data.index;
                            showConflictModal(data);
                        });
                    } else if (response.ok) {
                        filesList.splice(currentConflictIndex, 1);
                        issuedByList.splice(currentConflictIndex, 1);
                        expiryDateList.splice(currentConflictIndex, 1);

                        if (filesList.length > 0) {
                            prepareFormData();
                            uploadFiles(formData);
                        } else {
                            conflictModal.hide();
                            window.location.href = '@Url.Action("Index", "FileSystem")?path=@currentPath';
                        }
                    } else {
                        alert('Error handling file conflict');
                    }
                });
            }

            document.getElementById('replaceButton').onclick = function () {
                handleFileConflict('replace');
            };

            document.getElementById('renameButton').onclick = function () {
                handleFileConflict('rename');
            };
        });
    </script>
}
